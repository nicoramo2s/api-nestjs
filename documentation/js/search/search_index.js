var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AdminController.html",[0,1.559,1,2.33]],["body/controllers/AdminController.html",[0,1.048,1,2.382,2,0.979,3,0.194,4,0.194,5,0.173,6,1.975,7,1.567,8,1.567,9,0.285,10,1.304,11,2.677,12,3.541,13,4.284,14,3.541,15,2.329,16,1.148,17,4.148,18,3.718,19,1.577,20,0.025,21,2.329,22,3.849,23,1.278,24,3.002,25,2.647,26,1.652,27,2.329,28,3.647,29,1.872,30,0.885,31,2.329,32,1.577,33,1.388,34,0.618,35,1.223,36,1.479,37,1.928,38,2.329,39,2.695,40,2.329,41,4.778,42,1.975,43,1.896,44,2.882,45,2.329,46,1.567,47,1.311,48,1.994,49,1.994,50,2.17,51,2.329,52,2.329,53,2.329,54,2.882,55,2.329,56,2.329,57,0.594,58,1.567,59,1.741,60,1.975,61,1.567,62,0.514,63,1.311,64,1.488,65,1.741,66,1.311,67,1.427,68,1.567,69,1.994,70,1.741,71,1.212,72,2.412,73,1.975,74,2.647,75,3.219,76,3.219,77,1.567,78,0.858,79,2.329,80,1.741,81,2.329,82,0.194,83,0.008,84,1.212,85,0.915,86,3.632,87,2.882,88,2.882,89,2.329,90,2.329,91,3.632,92,1.577,93,2.329,94,1.928,95,2.329,96,2.329,97,3.632,98,4.053,99,1.8,100,2.329,101,1.975,102,1.975,103,2.329,104,2.329,105,2.329,106,2.329,107,1.975,108,2.329,109,2.329,110,2.329,111,1.567,112,1.427,113,1.741,114,2.329,115,0.915,116,2.329,117,0.012,118,0.012]],["title/modules/AdminModule.html",[119,1.362,120,2.123]],["body/modules/AdminModule.html",[1,3.89,2,2.192,3,0.337,4,0.337,5,0.3,20,0.025,57,0.648,62,0.891,72,3.652,73,3.42,82,0.337,83,0.014,117,0.018,118,0.018,119,2.273,120,4.177,121,1.949,122,1.949,123,2.271,124,2.271,125,1.949,126,3.256,127,2.271,128,3.42,129,3.42,130,3.42,131,3.652,132,3.133,133,2.938,134,2.271,135,2.271,136,4.034,137,3.197,138,4.034,139,3.016,140,4.034]],["title/injectables/AdminService.html",[72,1.951,141,0.765]],["body/injectables/AdminService.html",[3,0.264,4,0.264,5,0.235,9,0.387,10,1.629,11,2.892,16,1.241,20,0.025,22,2.362,23,1.304,26,1.091,30,1.143,32,1.88,33,1.654,34,0.737,35,1.458,36,1.763,37,1.422,39,3.116,43,1.88,44,3.435,48,1.779,54,3.435,57,0.596,62,0.697,72,2.491,82,0.264,83,0.011,85,1.739,92,1.88,94,1.991,99,2.146,117,0.015,118,0.015,141,0.977,142,1.327,143,2.678,144,4.425,145,3.308,146,5.533,147,2.138,148,3.159,149,2.717,150,3.226,151,3.159,152,4.425,153,3.159,154,3.308,155,3.159,156,3.116,157,3.159,158,1.779,159,3.159,160,1.422,161,3.159,162,2.678,163,2.362,164,2.976,165,3.159,166,2.146,167,5.107,168,3.308,169,2.678,170,3.159]],["title/modules/AppModule.html",[119,1.362,171,2.33]],["body/modules/AppModule.html",[2,1.575,3,0.313,4,0.313,5,0.279,20,0.025,57,0.664,62,0.827,82,0.313,83,0.013,117,0.017,118,0.017,119,2.193,120,3.895,121,1.811,122,1.811,123,2.11,124,2.11,125,1.811,126,2.799,127,2.11,131,3.578,132,3.07,133,2.799,134,2.11,135,2.11,137,3.047,171,4.594,172,3.177,173,3.177,174,3.895,175,3.748,176,3.748,177,2.802,178,1.811,179,3.748,180,3.748,181,3.748,182,3.177,183,3.748,184,3.748,185,3.748,186,3.748,187,3.748,188,2.521,189,3.748]],["title/controllers/AuthController.html",[0,1.559,190,2.33]],["body/controllers/AuthController.html",[0,1.32,2,1.232,3,0.245,4,0.245,5,0.218,7,1.973,9,0.359,10,1.546,11,2.651,17,4.249,18,3.718,19,1.546,20,0.025,23,0.989,28,3.6,29,1.848,30,0.867,32,1.546,33,1.36,34,0.606,35,1.198,36,1.449,37,1.889,43,2.169,57,0.621,58,1.973,61,1.973,62,0.647,63,1.651,68,1.973,75,3.298,76,3.298,77,1.973,78,1.08,82,0.245,83,0.01,84,1.526,85,1.153,87,2.824,88,2.824,92,1.546,94,1.889,99,1.232,111,1.973,112,3.005,117,0.015,118,0.015,158,2.364,160,1.32,166,1.232,190,2.824,191,2.486,192,2.933,193,2.364,194,3.494,195,2.933,196,3.28,197,2.933,198,4.198,199,4.802,200,3.138,201,2.573,202,2.933,203,3.298,204,2.486,205,2.933,206,3.138,207,4.157,208,2.933,209,1.651,210,2.933,211,2.551,212,2.192,213,2.486,214,1.973,215,2.933,216,2.933,217,2.933,218,2.933,219,2.933,220,2.933,221,2.933,222,2.933,223,2.933,224,2.933,225,4.157,226,2.933]],["title/modules/AuthModule.html",[119,1.362,174,2.123]],["body/modules/AuthModule.html",[2,2.045,3,0.303,4,0.303,5,0.27,20,0.025,57,0.669,62,0.801,82,0.303,83,0.012,117,0.017,118,0.017,119,2.158,121,1.754,122,1.754,123,2.044,124,2.044,125,1.754,126,3.091,127,2.044,132,3.042,133,2.74,134,2.044,135,2.044,137,2.982,139,2.713,174,4.165,190,3.693,211,3.277,212,2.713,227,3.077,228,3.63,229,3.077,230,3.859,231,3.859,232,3.63,233,3.63,234,2.441,235,4.867,236,2.044,237,3.63,238,3.63,239,3.63,240,3.63,241,2.713,242,3.63,243,3.63,244,3.63,245,3.63]],["title/injectables/AuthService.html",[141,0.765,211,1.803]],["body/injectables/AuthService.html",[3,0.225,4,0.225,5,0.201,9,0.331,10,1.456,11,2.786,16,1.106,20,0.025,23,1.214,26,0.933,30,1.064,32,1.896,33,1.669,34,0.743,35,1.47,36,1.616,37,1.216,43,1.723,50,1.656,57,0.606,62,0.596,82,0.225,83,0.009,85,1.555,92,2.109,94,2.467,99,1.966,115,1.839,117,0.014,118,0.014,141,0.873,142,1.135,147,1.911,149,2.318,156,2.9,158,2.227,163,2.019,164,2.661,166,1.966,193,2.227,194,3.332,201,1.656,204,3.353,211,2.058,213,2.29,234,1.817,241,2.019,246,2.29,247,3.956,248,2.701,249,5.017,250,2.701,251,3.956,252,3.956,253,3.157,254,2.701,255,2.701,256,3.956,257,2.649,258,2.701,259,2.29,260,3.353,261,2.29,262,1.406,263,2.701,264,4.68,265,2.701,266,3.956,267,2.701,268,2.701,269,2.701,270,2.701,271,2.29,272,2.701,273,1.423,274,1.817,275,1.216,276,2.019,277,2.701,278,2.019,279,3.353,280,2.701,281,2.701,282,2.701,283,2.701,284,2.701,285,2.701,286,2.701,287,3.956,288,2.701,289,2.29,290,2.701,291,2.701,292,2.701,293,2.701,294,2.701]],["title/classes/CreatePostDTO.html",[83,0.012,295,2.123]],["body/classes/CreatePostDTO.html",[3,0.292,4,0.292,5,0.26,9,0.429,16,1.251,19,2.128,20,0.024,29,2.238,30,1.194,34,0.834,35,1.355,57,0.486,78,1.288,82,0.292,83,0.016,117,0.017,118,0.017,295,2.91,296,1.288,297,5.122,298,2.145,299,1.639,300,2.805,301,3.402,302,3.905,303,3.588,304,3.5,305,2.673,306,4.025,307,3.5,308,4.748,309,4.9,310,4.025,311,3.5,312,3.5,313,3.5,314,3.5,315,3.144,316,3.703,317,2.91,318,3.144,319,2.616,320,1.691,321,3.5,322,3.254]],["title/classes/CreateUserDTO.html",[83,0.012,262,1.803]],["body/classes/CreateUserDTO.html",[3,0.298,4,0.298,5,0.265,9,0.437,16,1.209,19,2.004,20,0.025,29,2.163,30,1.124,34,0.785,47,2.009,57,0.596,78,1.314,82,0.401,83,0.02,85,2.593,115,2.39,117,0.017,118,0.017,257,3.094,262,2.504,273,1.849,296,1.314,299,1.661,305,2.709,315,1.857,316,3.57,318,2.504,319,2.668,320,1.724,323,2.668,324,3.569,325,4.079,326,3.569,327,4.615,328,3.569,329,3.569,330,3.569,331,3.569,332,2.668,333,2.4,334,2.4,335,2.668,336,3.236,337,3.025,338,4.615,339,3.025,340,3.025,341,2.187,342,1.402,343,3.025]],["title/classes/FilterPostsDto.html",[83,0.012,344,2.123]],["body/classes/FilterPostsDto.html",[3,0.341,4,0.341,5,0.304,9,0.501,16,1.186,19,1.937,20,0.024,29,2.121,30,1.087,34,0.759,35,1.754,57,0.538,78,1.504,82,0.341,83,0.018,117,0.018,118,0.018,296,1.504,298,2.504,299,1.816,300,3.028,301,3.579,305,2.962,306,4.46,309,4.46,310,4.46,315,3.028,317,3.565,318,3.028,320,1.974,322,2.962,344,3.224,345,4.932,346,4.46,347,3.464,348,3.464]],["title/injectables/JwtAuthGuard.html",[66,1.951,141,0.765]],["body/injectables/JwtAuthGuard.html",[3,0.414,4,0.414,5,0.37,20,0.024,57,0.608,62,1.096,66,3.344,67,3.044,82,0.414,83,0.017,117,0.021,118,0.021,141,1.311,142,2.087,236,2.797,342,2.334,349,3.713,350,5.938,351,4.211]],["title/injectables/JwtStrategy.html",[141,0.765,230,2.123]],["body/injectables/JwtStrategy.html",[3,0.332,4,0.332,5,0.296,9,0.488,10,1.905,20,0.025,26,1.787,30,1.069,32,1.467,33,1.29,34,0.575,35,1.137,36,1.375,43,1.467,57,0.623,62,0.879,82,0.332,83,0.014,117,0.018,118,0.018,141,1.142,142,1.674,147,2.777,201,2.441,230,3.171,236,2.243,253,3.729,261,3.377,271,3.377,273,1.573,275,2.328,278,2.978,342,2.034,352,3.377,353,4.387,354,4.387,355,3.983,356,5.175,357,3.983,358,3.377,359,3.983,360,3.377,361,2.978,362,3.377,363,3.983,364,3.983,365,3.983,366,2.978,367,3.983,368,3.983,369,3.983,370,3.983]],["title/injectables/LocalAuthGuard.html",[141,0.765,214,2.33]],["body/injectables/LocalAuthGuard.html",[3,0.414,4,0.414,5,0.37,20,0.024,57,0.608,62,1.096,82,0.414,83,0.017,117,0.021,118,0.021,141,1.311,142,2.087,214,3.994,236,2.797,342,2.334,349,3.713,351,4.211,371,4.211,372,5.938]],["title/injectables/LocalStrategy.html",[141,0.765,231,2.123]],["body/injectables/LocalStrategy.html",[3,0.311,4,0.311,5,0.277,9,0.457,10,1.823,11,2.503,16,1.225,20,0.025,23,1.167,26,1.286,30,1.023,32,1.823,33,1.604,34,0.714,35,1.414,36,1.286,43,1.372,57,0.607,62,0.822,82,0.311,83,0.013,84,1.939,92,1.372,94,1.676,99,1.565,115,1.946,117,0.017,118,0.017,141,1.093,142,1.565,147,1.8,156,2.788,166,1.565,211,3.302,212,2.785,231,3.035,236,2.098,257,2.864,273,1.133,274,2.506,275,1.676,276,2.785,342,1.946,353,4.198,354,4.198,358,3.159,360,3.159,361,2.785,362,3.159,373,3.159,374,3.726,375,3.726,376,4.952,377,3.726,378,4.198,379,3.159,380,3.726,381,3.726,382,3.726]],["title/classes/Login.html",[83,0.012,193,1.951]],["body/classes/Login.html",[3,0.308,4,0.308,5,0.275,9,0.453,16,1.247,19,1.813,20,0.025,29,2.23,30,1.017,34,0.71,57,0.567,64,1.552,71,1.922,78,1.36,82,0.411,83,0.019,115,2.539,117,0.017,118,0.017,193,3.118,194,2.079,257,3.121,273,1.497,296,1.36,299,1.7,305,2.079,315,3.294,316,3.771,317,2.263,318,2.882,320,1.784,322,3.465,336,3.725,342,1.452,383,2.761,384,3.693,385,3.68,386,3.693,387,3.693,388,4.695,389,3.693,390,3.131]],["title/classes/Post.html",[83,0.012,160,1.559]],["body/classes/Post.html",[3,0.278,4,0.278,5,0.248,9,0.409,16,1.318,19,2.187,20,0.025,23,1.4,30,1.227,34,0.959,57,0.538,82,0.438,83,0.011,92,1.227,117,0.016,118,0.016,160,2.067,162,2.826,178,1.611,188,4.375,296,1.227,299,1.586,300,2.735,301,2.959,302,3.221,303,2.959,391,2.242,392,3.535,393,5.036,394,5.434,395,3.334,396,3.434,397,3.334,398,3.334,399,3.334,400,4.593,401,3.334,402,5.205,403,3.09,404,2.826,405,2.815,406,3.434,407,2.826,408,2.826,409,3.334,410,2.242,411,2.826]],["title/interfaces/PostRequest.html",[412,2.123,413,2.123]],["body/interfaces/PostRequest.html",[3,0.391,4,0.391,5,0.349,9,0.575,16,1.196,20,0.024,23,1.521,26,1.62,34,0.894,57,0.48,63,2.641,82,0.391,117,0.02,118,0.02,273,1.426,275,2.111,299,1.981,342,2.255,412,2.875,413,3.516,414,3.507,415,3.977,416,4.168,417,4.864]],["title/controllers/PostsController.html",[0,1.559,418,2.33]],["body/controllers/PostsController.html",[0,0.54,2,0.504,3,0.1,4,0.1,5,0.089,7,0.807,9,0.147,10,0.76,11,2.735,16,1.108,17,4.295,18,3.751,19,1.653,20,0.025,22,2.718,23,0.283,25,1.543,26,1.897,28,3.63,29,1.928,30,0.928,32,1.794,33,1.455,34,0.648,35,1.282,36,1.863,37,1.914,39,2.236,41,2.736,42,1.017,43,1.851,44,3.63,46,0.807,47,0.676,48,1.817,49,1.53,50,1.665,57,0.541,58,0.807,59,0.897,60,3.083,61,0.807,62,0.265,63,0.676,64,0.867,65,0.897,66,0.676,67,0.735,68,0.807,69,1.162,70,0.897,71,0.625,74,1.543,75,3.158,76,3.158,77,0.807,78,0.442,80,0.897,82,0.1,83,0.004,84,0.625,85,0.472,86,1.75,87,3.021,88,3.021,91,3.807,92,1.987,94,2.021,97,3.807,98,4.174,99,1.887,101,1.017,102,1.017,111,1.389,117,0.007,118,0.007,145,2.031,150,1.414,154,0.897,160,2.513,166,1.356,168,2.412,169,1.017,200,0.897,203,3.906,206,1.543,209,2.831,273,0.628,295,1.977,300,1.679,301,1.817,302,1.265,303,1.817,344,1.977,392,2.86,413,3.422,418,1.389,419,1.017,420,2.303,421,2.717,422,2.717,423,2.303,424,2.065,425,2.717,426,2.303,427,1.2,428,1.2,429,3.227,430,2.065,431,1.2,432,1.2,433,1.2,434,1.2,435,1.2,436,1.2,437,3.227,438,2.065,439,1.2,440,1.2,441,1.2,442,1.017,443,1.2,444,2.065,445,1.75,446,2.736,447,1.2,448,1.2,449,1.2,450,1.2,451,1.2,452,1.817,453,1.2,454,1.2,455,1.2,456,1.977,457,1.2,458,1.75,459,1.265,460,1.2,461,1.017,462,1.2,463,1.2,464,2.412,465,1.017,466,1.017,467,1.017,468,1.017,469,1.2,470,1.017,471,1.2,472,4.491,473,2.717,474,1.2,475,2.303,476,1.2,477,3.636,478,1.2,479,1.2,480,1.2,481,1.017,482,2.303,483,1.2,484,1.2,485,1.2,486,1.2,487,1.2,488,1.2,489,1.2,490,1.017,491,2.736,492,2.065,493,2.065,494,1.2,495,1.2,496,1.2,497,1.2]],["title/modules/PostsModule.html",[119,1.362,131,1.951]],["body/modules/PostsModule.html",[2,2.118,3,0.319,4,0.319,5,0.285,20,0.025,33,1.24,57,0.654,62,0.845,82,0.319,83,0.013,117,0.018,118,0.018,119,2.215,121,1.849,122,1.849,123,2.155,124,2.155,125,1.849,126,3.174,127,3.174,131,3.768,132,3.088,133,2.838,134,2.155,135,2.155,137,3.089,139,2.861,150,3.566,160,1.722,177,2.861,178,1.849,403,2.574,410,3.391,418,3.792,468,3.245,498,3.245,499,3.245,500,3.827,501,3.245,502,3.827,503,3.827,504,3.245,505,3.245,506,3.827]],["title/injectables/PostsService.html",[141,0.765,150,1.803]],["body/injectables/PostsService.html",[3,0.119,4,0.119,5,0.106,8,1.612,9,0.175,10,0.882,11,2.831,16,1.277,20,0.025,23,0.337,26,2.023,30,1.043,32,1.859,33,1.635,34,0.701,35,1.441,36,1.677,37,1.813,39,2.037,43,1.919,44,3.114,48,1.349,49,1.349,57,0.497,62,0.316,82,0.119,83,0.005,85,0.942,92,2.25,94,2.561,99,2.461,112,1.895,113,1.069,117,0.014,118,0.008,141,0.529,142,0.601,145,1.791,147,1.158,149,1.628,150,1.247,154,1.791,156,2.454,158,1.349,160,2.346,163,1.069,164,1.612,166,2.461,178,0.691,207,1.213,209,2.269,259,3.696,273,0.94,274,0.962,279,2.032,300,2.268,301,2.607,302,1.895,303,2.842,344,2.217,378,3.696,392,3.396,405,0.877,420,2.622,423,2.032,426,2.622,442,2.032,452,2.454,456,2.217,459,0.877,464,2.312,465,1.213,466,1.213,467,1.213,475,4.28,491,4.117,504,1.213,507,1.213,508,3.093,509,2.396,510,2.396,511,2.396,512,1.43,513,3.067,514,3.093,515,1.43,516,2.396,517,1.43,518,1.43,519,1.43,520,1.43,521,4.359,522,1.43,523,2.396,524,1.43,525,2.396,526,1.43,527,2.396,528,1.43,529,2.396,530,1.43,531,1.43,532,1.43,533,1.213,534,1.43,535,1.43,536,2.396,537,1.43,538,2.312,539,1.43,540,2.396,541,1.43,542,2.396,543,2.396,544,1.43,545,1.43,546,1.43,547,1.43,548,1.43,549,2.396,550,2.396,551,2.396,552,2.396,553,2.396,554,2.396,555,1.43,556,3.093,557,2.396,558,3.093,559,2.396,560,1.43,561,1.43,562,2.396,563,3.093,564,1.43,565,2.396,566,1.43,567,1.43,568,2.396,569,2.396,570,1.43,571,1.43,572,1.43,573,1.213,574,1.43,575,1.43,576,2.396,577,2.396,578,1.43,579,1.43,580,3.067,581,1.43,582,1.43,583,3.093]],["title/classes/Register.html",[83,0.012,194,1.951]],["body/classes/Register.html",[3,0.29,4,0.29,5,0.259,9,0.427,16,1.25,19,1.979,20,0.025,29,2.235,30,1.11,34,0.775,35,1.35,57,0.55,64,1.462,71,1.811,78,1.281,82,0.395,83,0.018,115,2.501,117,0.016,118,0.016,193,3.395,194,2.663,257,3.074,273,1.834,296,1.281,299,1.633,305,2.663,315,3.237,316,3.695,317,2.133,318,2.797,320,1.681,322,3.395,336,3.615,342,1.859,383,2.602,385,2.602,388,4.556,390,4.01,584,3.48,585,4.731,586,3.48,587,4.731,588,3.48,589,3.48]],["title/guards/RolesGuard.html",[69,1.951,590,2.59]],["body/guards/RolesGuard.html",[3,0.317,4,0.317,5,0.283,9,0.466,10,1.849,20,0.025,23,0.896,30,1.037,32,1.849,33,1.627,34,0.724,35,1.433,36,1.313,43,1.849,57,0.612,62,0.84,64,2.361,69,2.827,71,1.98,82,0.317,83,0.013,84,1.98,85,1.495,92,2.069,117,0.018,118,0.018,141,1.108,147,1.838,366,2.844,416,3.377,591,3.804,592,3.225,593,5.977,594,3.804,595,6.382,596,3.804,597,5.021,598,5.977,599,3.804,600,3.804,601,5.021,602,3.225,603,2.844,604,3.804,605,3.804,606,3.804,607,3.804,608,3.804,609,3.804,610,3.804,611,3.804]],["title/classes/SearchPostsDto.html",[83,0.012,452,1.951]],["body/classes/SearchPostsDto.html",[3,0.315,4,0.315,5,0.28,9,0.462,16,1.229,19,2.06,20,0.024,29,2.198,30,1.156,34,0.807,35,1.817,39,3.488,48,3.488,49,2.81,50,3.059,57,0.511,78,1.388,82,0.315,83,0.017,117,0.017,118,0.017,296,1.388,298,2.31,299,1.723,303,3.656,315,3.099,317,3.65,318,3.099,320,1.821,322,3.15,346,4.744,347,3.196,348,3.196,452,2.81,612,5.049,613,4.991,614,3.77]],["title/classes/UpdatePostDTO.html",[83,0.012,456,2.123]],["body/classes/UpdatePostDTO.html",[3,0.413,4,0.413,5,0.368,20,0.024,57,0.606,82,0.413,83,0.017,117,0.021,118,0.021,206,3.698,295,3.032,296,1.821,298,3.032,332,3.698,333,3.328,334,3.328,342,2.328,456,3.631,464,3.698,615,4.194,616,5.925]],["title/classes/UpdateUserDTO.html",[83,0.012,341,2.123]],["body/classes/UpdateUserDTO.html",[3,0.344,4,0.344,5,0.307,16,1.128,20,0.024,29,2.018,47,2.323,57,0.631,78,1.519,82,0.442,83,0.021,85,2.297,115,2.08,117,0.018,118,0.018,257,2.824,262,2.147,273,1.61,296,1.519,305,2.323,315,2.147,316,3.779,318,2.755,319,3.084,320,1.993,323,3.084,325,3.498,327,4.488,332,3.084,333,2.775,334,2.775,335,3.084,336,3.561,337,3.498,338,4.955,339,3.498,340,3.498,341,3.244,342,2.08,343,4.488]],["title/classes/User.html",[23,0.816,83,0.012]],["body/classes/User.html",[3,0.283,4,0.283,5,0.252,9,0.415,16,1.314,19,2.099,20,0.025,23,1.094,30,1.178,34,0.942,46,3.124,57,0.542,64,2.51,71,1.763,82,0.442,83,0.012,92,1.247,115,2.083,117,0.016,118,0.016,178,1.636,188,4.553,257,2.56,273,1.611,275,2.384,296,1.247,299,1.603,393,4.834,394,5.455,396,2.532,402,5.064,403,3.124,404,2.872,405,2.076,406,3.471,408,2.872,617,2.278,618,5.701,619,3.387,620,3.387,621,4.644,622,3.387,623,3.387,624,2.872,625,2.872,626,2.278,627,2.872]],["title/interfaces/UserPayload.html",[253,2.123,412,2.123]],["body/interfaces/UserPayload.html",[3,0.391,4,0.391,5,0.349,9,0.575,16,1.34,20,0.024,26,2.229,34,0.894,82,0.391,117,0.02,118,0.02,253,3.516,273,1.963,275,2.905,299,1.981,412,2.875,414,3.507,628,3.977]],["title/classes/UserRequest.html",[83,0.012,196,2.123]],["body/classes/UserRequest.html",[3,0.4,4,0.4,5,0.357,9,0.588,16,1.208,20,0.024,23,1.475,26,1.656,30,0.991,34,0.839,82,0.4,83,0.016,117,0.02,118,0.02,196,3.564,273,1.459,275,2.159,296,1.766,299,2.008,342,2.286,416,3.912,417,4.067,629,4.067,630,4.798]],["title/controllers/UsersController.html",[0,1.559,631,2.33]],["body/controllers/UsersController.html",[0,1.166,2,1.089,3,0.216,4,0.216,5,0.193,7,1.743,9,0.318,10,1.412,11,2.539,16,1.089,17,4.119,18,3.579,19,1.412,20,0.025,23,1.489,24,3.252,25,2.867,26,1.948,28,3.396,29,1.743,30,0.792,32,1.412,33,1.243,34,0.553,35,1.095,36,1.324,37,1.726,43,1.859,54,1.743,57,0.627,58,1.743,59,1.937,61,1.743,62,0.572,63,1.459,64,1.612,65,1.937,66,1.459,67,1.588,68,1.743,69,2.16,70,1.937,71,1.348,74,2.867,75,3.072,76,3.072,77,1.743,78,0.954,80,1.937,82,0.216,83,0.009,84,1.348,85,1.018,87,2.58,88,2.58,92,1.412,94,1.726,99,1.612,107,3.252,111,2.58,112,1.588,115,1.508,117,0.013,118,0.013,149,1.726,158,1.459,166,1.612,200,2.867,209,3.177,262,2.627,273,1.166,274,2.58,275,1.726,276,2.867,341,1.588,416,1.743,445,3.252,446,4.28,458,4.569,459,1.588,461,2.197,470,3.872,481,2.197,482,2.197,490,2.197,538,1.937,631,2.58,632,2.197,633,3.836,634,3.872,635,2.591,636,2.591,637,2.591,638,2.197,639,2.591,640,2.591,641,2.197,642,2.197,643,2.591,644,2.591,645,2.591,646,2.591,647,2.591,648,3.836,649,3.836,650,2.197,651,2.591,652,2.591]],["title/modules/UsersModule.html",[119,1.362,132,1.674]],["body/modules/UsersModule.html",[2,2.183,3,0.334,4,0.334,5,0.298,20,0.025,23,0.945,33,1.299,57,0.647,62,0.885,82,0.334,83,0.014,117,0.018,118,0.018,119,2.266,121,1.937,122,1.937,123,2.257,124,2.257,125,1.937,126,3.246,127,3.246,132,3.184,133,2.926,134,2.257,135,2.257,137,2.457,149,3.104,177,2.997,178,1.937,403,2.696,505,3.398,626,3.495,631,3.878,642,3.398,653,3.398,654,3.398,655,3.398,656,4.009,657,4.009,658,3.398,659,4.009]],["title/injectables/UsersService.html",[141,0.765,149,1.559]],["body/injectables/UsersService.html",[3,0.214,4,0.214,5,0.191,9,0.315,10,1.404,11,2.75,16,1.233,20,0.025,23,1.326,26,1.569,30,1.203,32,2.072,33,1.823,34,0.812,35,1.606,36,1.942,37,1.156,43,2.072,54,3.057,57,0.55,62,0.567,82,0.214,83,0.009,85,1.01,92,2.072,94,2.045,99,2.113,113,1.921,115,1.498,117,0.013,118,0.013,141,0.842,142,1.08,147,1.842,149,1.716,156,3.501,158,1.447,164,1.729,166,2.257,168,1.921,178,1.242,188,1.729,209,2.831,225,2.179,262,3.113,289,3.232,405,1.575,459,1.575,513,4.263,533,2.179,580,2.179,634,3.232,638,3.232,641,2.179,658,2.179,660,2.179,661,3.813,662,5.029,663,3.813,664,3.813,665,2.57,666,2.57,667,3.813,668,3.813,669,2.57,670,3.813,671,2.57,672,2.57,673,3.813,674,2.57,675,3.813,676,2.57,677,2.57,678,2.57,679,2.57,680,2.57,681,2.57,682,2.57,683,2.57,684,2.57,685,2.57,686,2.57,687,2.57,688,2.57,689,2.57,690,4.545,691,2.57,692,3.813,693,4.545,694,2.57,695,2.57,696,2.57]],["title/injectables/ValidateToken.html",[141,0.765,697,2.59]],["body/injectables/ValidateToken.html",[3,0.358,4,0.358,5,0.319,9,0.526,10,1.999,16,1.149,20,0.025,30,1.122,32,1.999,33,1.759,34,0.783,35,1.55,36,1.482,43,1.581,57,0.556,62,0.948,82,0.358,83,0.015,84,2.234,117,0.019,118,0.019,141,1.199,142,1.804,147,2.074,199,3.64,201,3.327,234,2.888,241,3.21,249,5.305,278,3.21,697,4.677,698,3.64,699,4.294,700,4.294,701,5.43,702,4.294,703,4.294]],["title/coverage.html",[704,3.998]],["body/coverage.html",[0,2.191,1,1.62,5,0.179,6,2.042,20,0.025,23,0.568,34,0.347,64,1.012,66,1.356,67,1.476,69,1.356,72,1.356,83,0.021,117,0.013,118,0.013,125,1.164,141,1.326,143,2.042,149,1.084,150,1.254,160,1.084,166,1.012,190,1.62,191,2.042,193,1.356,194,1.356,196,1.476,203,1.62,211,1.254,214,1.62,230,1.476,231,1.476,246,2.042,253,1.476,262,1.254,295,1.476,297,2.042,298,2.984,323,2.715,341,1.476,344,1.476,345,2.042,349,2.715,352,2.042,371,2.042,373,2.042,383,2.715,391,2.443,410,1.62,412,2.226,413,1.476,415,2.042,418,1.62,419,2.042,452,1.356,456,1.476,507,2.042,590,1.801,592,2.042,603,1.801,612,2.042,615,2.042,617,2.443,626,1.62,628,2.042,629,2.042,631,1.62,632,2.042,660,2.042,697,1.801,698,2.042,704,2.042,705,2.409,706,2.409,707,2.409,708,5.995,709,5.225,710,4.869,711,5.868,712,3.08,713,6.623,714,6.798,715,3.632,716,2.042,717,3.08,718,2.409,719,2.409,720,2.409,721,2.042,722,2.042,723,3.707,724,2.042,725,2.042,726,4.43,727,2.042,728,2.042,729,2.042,730,2.042,731,3.08,732,4.106,733,2.042,734,2.042,735,2.042,736,2.042,737,2.042,738,2.409,739,2.409,740,2.409]],["title/dependencies.html",[122,2.011,741,2.458]],["body/dependencies.html",[20,0.025,62,0.926,63,3.012,78,1.544,83,0.018,117,0.019,118,0.019,122,2.026,178,2.026,182,3.556,201,2.57,234,2.821,236,2.362,260,3.556,320,2.026,333,2.821,334,2.821,335,3.135,361,4.403,379,3.556,405,2.57,602,3.556,742,4.194,743,4.194,744,5.349,745,4.194,746,5.349,747,4.194,748,4.194,749,4.194,750,4.194,751,4.194,752,4.194,753,4.194,754,4.194,755,4.194,756,4.194,757,4.194,758,4.194,759,4.194,760,4.194,761,4.194,762,4.194,763,4.194,764,4.194,765,4.194,766,4.194,767,4.194]],["title/miscellaneous/enumerations.html",[768,1.401,769,3.53]],["body/miscellaneous/enumerations.html",[8,4.1,9,0.636,20,0.023,23,1.436,47,3.432,64,2.561,117,0.021,118,0.021,768,2.508,769,4.4,770,5.191,771,5.191]],["title/miscellaneous/functions.html",[768,1.401,772,3.53]],["body/miscellaneous/functions.html",[9,0.634,18,3.168,20,0.023,36,1.785,117,0.021,118,0.021,125,3.121,716,4.382,732,3.864,733,5.477,768,2.497,772,4.382,773,5.169,774,4.382]],["title/index.html",[9,0.355,775,2.9,776,2.9]],["body/index.html",[20,0.024,29,1.59,117,0.02,118,0.02,322,3.461,777,4.606,778,4.606,779,4.606,780,4.606,781,4.606,782,4.606,783,4.606,784,4.606,785,4.606,786,4.606,787,4.606,788,6.588,789,4.606,790,4.606,791,4.606,792,6.416,793,4.606,794,4.606,795,4.809,796,4.606,797,4.606,798,4.606,799,4.606,800,4.606,801,3.905]],["title/modules.html",[121,2.278]],["body/modules.html",[20,0.021,117,0.021,118,0.021,120,3.044,121,2.399,131,2.797,132,2.399,171,3.341,174,3.044,802,6.728,803,6.728,804,6.728,805,6.728]],["title/overview.html",[806,3.998]],["body/overview.html",[2,1.495,20,0.024,49,2.004,72,3.06,117,0.017,118,0.017,119,1.399,120,4.042,121,1.719,122,1.719,123,2.004,124,2.004,125,1.719,126,2.004,127,2.004,128,3.017,129,3.017,130,3.017,131,3.713,132,3.186,133,2.704,134,2.004,135,2.004,142,1.495,149,2.88,150,3.331,171,4.484,172,3.017,173,3.017,174,4.122,211,2.829,227,3.017,229,3.017,230,3.331,231,3.331,296,1.31,414,2.66,498,3.017,499,3.017,501,3.017,590,2.66,653,3.017,654,3.017,655,3.017,806,3.017,807,3.559,808,3.559,809,3.559,810,3.559,811,3.559]],["title/properties.html",[299,1.437,741,2.458]],["body/properties.html",[20,0.024,29,1.822,117,0.021,118,0.021,299,1.822,300,2.746,812,5.277,813,5.277,814,5.277,815,5.277]],["title/miscellaneous/typealiases.html",[768,1.401,816,4.164]],["body/miscellaneous/typealiases.html",[9,0.639,20,0.021,34,0.752,117,0.021,118,0.021,391,3.506,406,4.567,407,5.18,617,3.506,624,5.18,768,2.518,817,5.212,818,4.419,819,4.419]],["title/miscellaneous/variables.html",[768,1.401,820,3.53]],["body/miscellaneous/variables.html",[8,1.114,9,0.203,16,0.662,20,0.025,23,0.933,26,1.507,34,0.841,37,1.217,39,0.933,46,4.201,47,3.487,48,0.933,49,0.933,50,1.015,64,1.441,98,1.238,99,1.968,112,1.015,115,2.253,117,0.009,118,0.009,156,2.458,160,0.745,166,2.551,196,1.658,203,1.82,209,0.933,257,2.769,273,1.773,275,2.664,300,2.438,301,2.637,302,2.87,303,2.783,366,2.023,385,3.853,391,1.114,392,3.151,396,2.564,410,1.82,411,1.404,413,1.015,452,0.933,459,1.015,538,1.238,573,4.944,603,2.023,617,1.114,625,4.37,626,1.82,627,1.404,650,2.294,708,3.357,712,1.404,717,3.971,721,1.404,722,2.294,723,1.404,724,2.294,725,2.294,726,1.404,727,2.294,728,2.294,729,2.294,730,2.294,731,3.357,732,1.238,734,2.294,735,2.294,736,2.294,737,2.294,768,0.8,774,3.7,795,1.404,801,5.499,818,1.404,819,1.404,820,1.404,821,3.43,822,4.365,823,1.656,824,2.706,825,4.684,826,1.656,827,1.656,828,1.656,829,1.656,830,1.656,831,1.656,832,1.656,833,1.656,834,1.656,835,1.656,836,1.656,837,1.656,838,1.656,839,1.656,840,1.656,841,1.656,842,1.656,843,1.656,844,1.656,845,1.656,846,4.684,847,4.684,848,1.656,849,1.656,850,1.656,851,1.656,852,1.656,853,1.656,854,2.706,855,3.43,856,3.43,857,3.96,858,3.96,859,5.155,860,1.656,861,3.96,862,1.656,863,1.656,864,2.706,865,4.365,866,4.684,867,1.656,868,1.656,869,1.656,870,1.656]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":813,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SearchPostsDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"classes/SearchPostsDto.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["10.2.8",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":810,"title":{},"body":{"overview.html":{}}}],["1234test",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["123id",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["126421674hdjsab",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":811,"title":{},"body":{"overview.html":{}}}],["200",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["3.1.1",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":808,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":807,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["5.11.97",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["655e078a81276db475f5e324",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["655e078a81276db475f5e558",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["7.6.5",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":809,"title":{},"body":{"overview.html":{}}}],["9.0.1",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["__v",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_id",{"_index":573,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["admin",{"_index":8,"title":{},"body":{"controllers/AdminController.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["admin.controller",{"_index":140,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":73,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["admin@admin.com",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admincontroller",{"_index":1,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":120,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminservice",{"_index":72,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["aliases",{"_index":817,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apibearerauth",{"_index":74,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":75,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":315,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdateUserDTO.html":{}}}],["apiproperty({example",{"_index":338,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["apiresponse",{"_index":76,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":77,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":79,"title":{},"body":{"controllers/AdminController.html":{}}}],["apitags('auth",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":469,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":790,"title":{},"body":{"index.html":{}}}],["applications",{"_index":785,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":171,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arraybuffer",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assign",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":68,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":349,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":190,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":351,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":350,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":372,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmock",{"_index":724,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authmodule",{"_index":174,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":300,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["author'})@apiresponse({status",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{}}}],["authors",{"_index":306,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{}}}],["authservice",{"_index":211,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":94,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["badrequestexception('the",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(register.password",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["blob",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["body).lean",{"_index":561,"title":{},"body":{"injectables/PostsService.html":{}}}],["bodyused",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":601,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":125,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":805,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":802,"title":{},"body":{"modules.html":{}}}],["building",{"_index":780,"title":{},"body":{"index.html":{}}}],["busca",{"_index":549,"title":{},"body":{"injectables/PostsService.html":{}}}],["cache",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":593,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":597,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":97,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["category",{"_index":301,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":83,"title":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserRequest.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":296,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserRequest.html":{},"overview.html":{}}}],["clone",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_adminmodule",{"_index":128,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":129,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":130,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":498,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":499,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":500,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":501,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":653,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":654,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":655,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coincida",{"_index":552,"title":{},"body":{"injectables/PostsService.html":{}}}],["comedy",{"_index":310,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{}}}],["con",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["configmodule",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":92,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":147,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["constructor(authservice",{"_index":374,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(jwt",{"_index":699,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["constructor(postmodel",{"_index":512,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":84,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/ValidateToken.html":{}}}],["constructor(reflector",{"_index":594,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(usermodel",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersservice",{"_index":148,"title":{},"body":{"injectables/AdminService.html":{}}}],["content",{"_index":302,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":600,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":608,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":607,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":609,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":81,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('auth",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":471,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":704,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"classes/UpdatePostDTO.html":{}}}],["created",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{}}}],["createpost",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(req",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(undefined",{"_index":517,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":295,"title":{"classes/CreatePostDTO.html":{}},"body":{"classes/CreatePostDTO.html":{},"controllers/PostsController.html":{},"classes/UpdatePostDTO.html":{},"coverage.html":{}}}],["createuser",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser.email",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser.username",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":262,"title":{"classes/CreateUserDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":472,"title":{},"body":{"controllers/PostsController.html":{}}}],["dataposts",{"_index":103,"title":{},"body":{"controllers/AdminController.html":{}}}],["datausers",{"_index":93,"title":{},"body":{"controllers/AdminController.html":{}}}],["declarations",{"_index":124,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorator",{"_index":604,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/User.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["del",{"_index":553,"title":{},"body":{"injectables/PostsService.html":{}}}],["delete",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/PostsController.html":{}}}],["delete(':id",{"_index":496,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('users/:id",{"_index":106,"title":{},"body":{"controllers/AdminController.html":{}}}],["deleted",{"_index":113,"title":{},"body":{"controllers/AdminController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["deleteduser",{"_index":109,"title":{},"body":{"controllers/AdminController.html":{}}}],["deleteduser.email",{"_index":116,"title":{},"body":{"controllers/AdminController.html":{}}}],["deleteduser.username",{"_index":114,"title":{},"body":{"controllers/AdminController.html":{}}}],["deletepost",{"_index":508,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(iduser",{"_index":519,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteuseradmin",{"_index":144,"title":{},"body":{"injectables/AdminService.html":{}}}],["deleteuseradmin(id",{"_index":152,"title":{},"body":{"injectables/AdminService.html":{}}}],["deleteuserbyid",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyid(id",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserpost",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteuserpost(req",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteuserwithadmin",{"_index":12,"title":{},"body":{"controllers/AdminController.html":{}}}],["deleteuserwithadmin(@param('id",{"_index":108,"title":{},"body":{"controllers/AdminController.html":{}}}],["deleteuserwithadmin(id",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{}}}],["dependencies",{"_index":122,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":445,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":791,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["dont",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/auth.dto",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":463,"title":{},"body":{"controllers/PostsController.html":{}}}],["dto/filter",{"_index":465,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/search",{"_index":466,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/update",{"_index":467,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/user.dto",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["efficient",{"_index":781,"title":{},"body":{"index.html":{}}}],["el",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["element",{"_index":613,"title":{},"body":{"classes/SearchPostsDto.html":{}}}],["email",{"_index":115,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":621,"title":{},"body":{"classes/User.html":{}}}],["enumerations",{"_index":769,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":98,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"miscellaneous/variables.html":{}}}],["error('function",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":322,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"index.html":{}}}],["example1234",{"_index":388,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{}}}],["exec",{"_index":574,"title":{},"body":{"injectables/PostsService.html":{}}}],["executioncontext",{"_index":598,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":82,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["exports",{"_index":127,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":63,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":342,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"interfaces/PostRequest.html":{},"classes/Register.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserRequest.html":{}}}],["extractjwt",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq.sflkxwrjsmekkf2qt4fwpmejf36pok6yjv_adqssw5c",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{}}}],["filter",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["filterdto",{"_index":525,"title":{},"body":{"injectables/PostsService.html":{}}}],["filterpost",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{}}}],["filterpost(query",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["filterpostsdto",{"_index":344,"title":{"classes/FilterPostsDto.html":{}},"body":{"classes/FilterPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["find",{"_index":569,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["firma",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["formdata",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["founded",{"_index":563,"title":{},"body":{"injectables/PostsService.html":{}}}],["framework",{"_index":779,"title":{},"body":{"index.html":{}}}],["function",{"_index":717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":772,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/filter",{"_index":474,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/filter')@apioperation({summary",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/search",{"_index":479,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/search')@apioperation({summary",{"_index":453,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/user/:userid",{"_index":484,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/user/:userid')@apioperation({summary",{"_index":449,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':id",{"_index":481,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('posts",{"_index":100,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('users",{"_index":89,"title":{},"body":{"controllers/AdminController.html":{}}}],["get()@apioperation({summary",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{}}}],["getadminallposts",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{}}}],["getadminallposts(page",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{}}}],["getadminallusers",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{}}}],["getadminallusers(@res",{"_index":90,"title":{},"body":{"controllers/AdminController.html":{}}}],["getadminallusers(res",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{}}}],["getallposts",{"_index":145,"title":{},"body":{"injectables/AdminService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(page",{"_index":154,"title":{},"body":{"injectables/AdminService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallusers",{"_index":146,"title":{},"body":{"injectables/AdminService.html":{}}}],["getfilterposts",{"_index":509,"title":{},"body":{"injectables/PostsService.html":{}}}],["getfilterposts(filterdto",{"_index":523,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(id",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyuser",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyuser(@param('userid",{"_index":485,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyuser(userid",{"_index":448,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyuserid",{"_index":510,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyuserid(userid",{"_index":527,"title":{},"body":{"injectables/PostsService.html":{}}}],["getting",{"_index":775,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(@param('id",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["globalthis.request",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":590,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":591,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/local",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["hashedpassword",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":547,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpstatus",{"_index":58,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["hydrateddocument",{"_index":406,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["iduser",{"_index":521,"title":{},"body":{"injectables/PostsService.html":{}}}],["ignoreexpiration",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":605,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":57,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["imports",{"_index":137,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incorrects",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["inherited",{"_index":585,"title":{},"body":{"classes/Register.html":{}}}],["injectable",{"_index":141,"title":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{}}}],["injectables",{"_index":142,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"overview.html":{}}}],["injectmodel",{"_index":533,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(post.name",{"_index":534,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectmodel(user.name",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":787,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":789,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":412,"title":{"interfaces/PostRequest.html":{},"interfaces/UserPayload.html":{}},"body":{"interfaces/PostRequest.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":414,"title":{},"body":{"interfaces/PostRequest.html":{},"interfaces/UserPayload.html":{},"overview.html":{}}}],["isemail",{"_index":336,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/UpdateUserDTO.html":{}}}],["isemail()@apiproperty({example",{"_index":584,"title":{},"body":{"classes/Register.html":{}}}],["isglobal",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":316,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/UpdateUserDTO.html":{}}}],["isnotempty()@apiproperty({example",{"_index":587,"title":{},"body":{"classes/Register.html":{}}}],["isnotempty()@isemail()@apiproperty({example",{"_index":324,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isnotempty()@isstring()@apiproperty({example",{"_index":308,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isnotempty()@isstring()@minlength(3)@apiproperty({example",{"_index":330,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isnotempty()@minlength(8)@apiproperty({example",{"_index":328,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isoptional",{"_index":317,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{}}}],["isoptional()@isstring()@apiproperty({example",{"_index":346,"title":{},"body":{"classes/FilterPostsDto.html":{},"classes/SearchPostsDto.html":{}}}],["isoptional()@isstring()@isnotempty()@apiproperty({example",{"_index":304,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isstring",{"_index":318,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdateUserDTO.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":387,"title":{},"body":{"classes/Login.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty({example",{"_index":384,"title":{},"body":{"classes/Login.html":{}}}],["isstring()@isnotempty()@minlength(4)@apiproperty({example",{"_index":313,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["json",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ValidateToken.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":66,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AdminController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ValidateToken.html":{}}}],["jwtstrategy",{"_index":230,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keepalive",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["know",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["lean",{"_index":580,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":123,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":814,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SearchPostsDto.html":{},"miscellaneous/variables.html":{}}}],["limit(parseint(limit",{"_index":579,"title":{},"body":{"injectables/PostsService.html":{}}}],["limitint",{"_index":542,"title":{},"body":{"injectables/PostsService.html":{}}}],["list",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["list'})@get('users",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{}}}],["literal",{"_index":417,"title":{},"body":{"interfaces/PostRequest.html":{},"classes/UserRequest.html":{}}}],["local",{"_index":379,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":214,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":231,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":193,"title":{"classes/Login.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Login.html":{},"classes/Register.html":{},"coverage.html":{}}}],["login(@req",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["login:25",{"_index":586,"title":{},"body":{"classes/Register.html":{}}}],["login:29",{"_index":588,"title":{},"body":{"classes/Register.html":{}}}],["match",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["matching",{"_index":118,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":112,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["messagesuccessfully",{"_index":727,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["metodo",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["minlength",{"_index":319,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["minlength(3",{"_index":337,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["minlength(4",{"_index":321,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["minlength(8",{"_index":340,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["miscellaneous",{"_index":768,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mockdata",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockdataadmin",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpost",{"_index":729,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockquery",{"_index":730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockrequest",{"_index":731,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocktoken",{"_index":725,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":795,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":513,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":119,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":121,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":405,"title":{},"body":{"classes/Post.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":409,"title":{},"body":{"classes/Post.html":{}}}],["mongoose.types.objectid",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":505,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.databases_url",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["nestjs/common",{"_index":62,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":602,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ValidateToken.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":333,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":78,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":166,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newmockresponse",{"_index":733,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["newuser",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["newuser.save",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["nico@nico.com",{"_index":390,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{}}}],["nicolas",{"_index":305,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/UpdateUserDTO.html":{}}}],["nicolas@nicolas.com",{"_index":325,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["node.js",{"_index":778,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":158,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('bad",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["notfoundexception('could",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('dont",{"_index":167,"title":{},"body":{"injectables/AdminService.html":{}}}],["notfoundexception('email",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('i",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('insert",{"_index":575,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('it",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":546,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('post",{"_index":562,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('posts",{"_index":581,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":788,"title":{},"body":{"index.html":{}}}],["object",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["options",{"_index":577,"title":{},"body":{"injectables/PostsService.html":{}}}],["origin",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":135,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":806,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":741,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SearchPostsDto.html":{},"miscellaneous/variables.html":{}}}],["pageint",{"_index":540,"title":{},"body":{"injectables/PostsService.html":{}}}],["palabrasecreta",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["param",{"_index":59,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":482,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["parseint(limit",{"_index":543,"title":{},"body":{"injectables/PostsService.html":{}}}],["parseint(page",{"_index":541,"title":{},"body":{"injectables/PostsService.html":{}}}],["partialtype",{"_index":332,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["partialtype(createpostdto",{"_index":616,"title":{},"body":{"classes/UpdatePostDTO.html":{}}}],["partialtype(createuserdto",{"_index":343,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["passport",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["password').exec",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["password').lean",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["passwordadmin",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordtest",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":571,"title":{},"body":{"injectables/PostsService.html":{}}}],["payload",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["populate",{"_index":570,"title":{},"body":{"injectables/PostsService.html":{}}}],["possible",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["post",{"_index":160,"title":{"classes/Post.html":{}},"body":{"injectables/AdminService.html":{},"controllers/AuthController.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiresponse({status",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('login",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@useguards(localauthguard)@apioperation({summary",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apioperation({summary",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":464,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDTO.html":{}}}],["post.dto.ts",{"_index":298,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"coverage.html":{}}}],["post.dto.ts:13",{"_index":348,"title":{},"body":{"classes/FilterPostsDto.html":{},"classes/SearchPostsDto.html":{}}}],["post.dto.ts:15",{"_index":307,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:18",{"_index":614,"title":{},"body":{"classes/SearchPostsDto.html":{}}}],["post.dto.ts:20",{"_index":312,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:25",{"_index":311,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:8",{"_index":347,"title":{},"body":{"classes/FilterPostsDto.html":{},"classes/SearchPostsDto.html":{}}}],["post.dto.ts:9",{"_index":314,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.name",{"_index":506,"title":{},"body":{"modules/PostsModule.html":{}}}],["post.userid.tostring",{"_index":555,"title":{},"body":{"injectables/PostsService.html":{}}}],["postcreated",{"_index":536,"title":{},"body":{"injectables/PostsService.html":{}}}],["postcreated._id",{"_index":539,"title":{},"body":{"injectables/PostsService.html":{}}}],["postdeleted",{"_index":565,"title":{},"body":{"injectables/PostsService.html":{}}}],["postdeleted._id",{"_index":567,"title":{},"body":{"injectables/PostsService.html":{}}}],["postdocument",{"_index":407,"title":{},"body":{"classes/Post.html":{},"miscellaneous/typealiases.html":{}}}],["postmodel",{"_index":516,"title":{},"body":{"injectables/PostsService.html":{}}}],["postrequest",{"_index":413,"title":{"interfaces/PostRequest.html":{}},"body":{"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["posts",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts'})@apiresponse({status",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["posts.controller",{"_index":503,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":468,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["postschema",{"_index":410,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":418,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":131,"title":{"modules/PostsModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":150,"title":{"injectables/PostsService.html":{}},"body":{"injectables/AdminService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postuser",{"_index":556,"title":{},"body":{"injectables/PostsService.html":{}}}],["postuser.userid.tostring",{"_index":558,"title":{},"body":{"injectables/PostsService.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":164,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret_key",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ValidateToken.html":{}}}],["production",{"_index":797,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":777,"title":{},"body":{"index.html":{}}}],["project",{"_index":786,"title":{},"body":{"index.html":{}}}],["promise",{"_index":156,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["prop",{"_index":402,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["prop({type",{"_index":393,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["properties",{"_index":299,"title":{"properties.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"properties.html":{}}}],["provided",{"_index":107,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UsersController.html":{}}}],["provided'})@apiresponse({status",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{}}}],["providers",{"_index":126,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":461,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":490,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["que",{"_index":550,"title":{},"body":{"injectables/PostsService.html":{}}}],["query",{"_index":60,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["query('limit",{"_index":102,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["query('page",{"_index":101,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["readonly",{"_index":85,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["redirect",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref",{"_index":400,"title":{},"body":{"classes/Post.html":{}}}],["referrer",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["referrerpolicy",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":595,"title":{},"body":{"guards/RolesGuard.html":{}}}],["regex",{"_index":576,"title":{},"body":{"injectables/PostsService.html":{}}}],["register",{"_index":194,"title":{"classes/Register.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Login.html":{},"classes/Register.html":{},"coverage.html":{}}}],["register(@body",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(register",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register.email",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["register.username",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["req",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["req.user.id",{"_index":477,"title":{},"body":{"controllers/PostsController.html":{}}}],["req.user.role",{"_index":492,"title":{},"body":{"controllers/PostsController.html":{}}}],["req.user.username",{"_index":487,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":416,"title":{},"body":{"interfaces/PostRequest.html":{},"guards/RolesGuard.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":394,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["res",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.created).json",{"_index":495,"title":{},"body":{"controllers/PostsController.html":{}}}],["res.status(httpstatus.created).json(data",{"_index":489,"title":{},"body":{"controllers/PostsController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":111,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(data",{"_index":473,"title":{},"body":{"controllers/PostsController.html":{}}}],["res.status(httpstatus.ok).json(dataposts",{"_index":105,"title":{},"body":{"controllers/AdminController.html":{}}}],["res.status(httpstatus.ok).json(datausers",{"_index":96,"title":{},"body":{"controllers/AdminController.html":{}}}],["res.status(httpstatus.ok).json(result",{"_index":478,"title":{},"body":{"controllers/PostsController.html":{}}}],["res.status(httpstatus.ok).json(token",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":134,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["result",{"_index":475,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["results",{"_index":117,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["returns",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/PostRequest.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["role_key",{"_index":603,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":64,"title":{},"body":{"controllers/AdminController.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles(roles.admin",{"_index":86,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["roles(roles.admin)@apioperation({summary",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{}}}],["roles(roles.admin)@delete(':id')@apioperation({summary",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["roles(roles.admin)@delete('users/:id')@apioperation({summary",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{}}}],["roles(roles.admin)@get('posts')@apioperation({summary",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{}}}],["roles(roles.admin)@put(':id')@apioperation({summary",{"_index":457,"title":{},"body":{"controllers/PostsController.html":{}}}],["roles(roles.user",{"_index":470,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["roles(roles.user)@get(':id')@apioperation({summary",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.admin",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["roles.admin)@put(':id')@apioperation({summary",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.some((role",{"_index":610,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.user",{"_index":625,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":69,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["run",{"_index":792,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":782,"title":{},"body":{"index.html":{}}}],["schema",{"_index":403,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schema/post.schema",{"_index":504,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["schemafactory",{"_index":404,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(post",{"_index":411,"title":{},"body":{"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":627,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/user.schema",{"_index":658,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["se",{"_index":551,"title":{},"body":{"injectables/PostsService.html":{}}}],["search",{"_index":168,"title":{},"body":{"injectables/AdminService.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["searchpost",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{}}}],["searchpost(undefined",{"_index":451,"title":{},"body":{"controllers/PostsController.html":{}}}],["searchposts",{"_index":511,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchposts(searchpostsdto",{"_index":529,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchpostsdto",{"_index":452,"title":{"classes/SearchPostsDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SearchPostsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ValidateToken.html":{}}}],["secretorkey",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":572,"title":{},"body":{"injectables/PostsService.html":{}}}],["server",{"_index":783,"title":{},"body":{"index.html":{}}}],["setmetadata(role_key",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":784,"title":{},"body":{"index.html":{}}}],["sign",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["signal",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["skip",{"_index":544,"title":{},"body":{"injectables/PostsService.html":{}}}],["skip((parseint(page",{"_index":578,"title":{},"body":{"injectables/PostsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["specific",{"_index":446,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["src/.../admin.mock.ts",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.mock.ts",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.schema.ts",{"_index":818,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../posts.mock.ts",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.mock.ts",{"_index":774,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":819,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/admin/admin.controller.ts",{"_index":6,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:30",{"_index":56,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:48",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:65",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.module.ts",{"_index":136,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/admin.service.ts",{"_index":143,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:14",{"_index":157,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:20",{"_index":155,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:26",{"_index":153,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:8",{"_index":151,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app.module.ts",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator",{"_index":65,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":383,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:10",{"_index":386,"title":{},"body":{"classes/Login.html":{}}}],["src/auth/dto/auth.dto.ts:15",{"_index":389,"title":{},"body":{"classes/Login.html":{}}}],["src/auth/dto/auth.dto.ts:21",{"_index":589,"title":{},"body":{"classes/Register.html":{}}}],["src/auth/guards/jwt",{"_index":67,"title":{},"body":{"controllers/AdminController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":371,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard",{"_index":70,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":592,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:7",{"_index":596,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":599,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":352,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.validate.ts",{"_index":698,"title":{},"body":{"injectables/ValidateToken.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.validate.ts:5",{"_index":700,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["src/auth/strategies/jwt.validate.ts:8",{"_index":702,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":373,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":377,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":375,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/enums/role.enum",{"_index":71,"title":{},"body":{"controllers/AdminController.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["src/common/enums/role.enum.ts",{"_index":771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/interfaces/passport.interface",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/common/interfaces/passport.interface.ts",{"_index":628,"title":{},"body":{"interfaces/UserPayload.html":{},"coverage.html":{}}}],["src/common/interfaces/postrequest.interface",{"_index":462,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/common/interfaces/postrequest.interface.ts",{"_index":415,"title":{},"body":{"interfaces/PostRequest.html":{},"coverage.html":{}}}],["src/common/interfaces/userrequest.interfaces",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/common/interfaces/userrequest.interfaces.ts",{"_index":629,"title":{},"body":{"classes/UserRequest.html":{},"coverage.html":{}}}],["src/common/interfaces/userrequest.interfaces.ts:2",{"_index":630,"title":{},"body":{"classes/UserRequest.html":{}}}],["src/main.ts",{"_index":716,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dto/create",{"_index":297,"title":{},"body":{"classes/CreatePostDTO.html":{},"coverage.html":{}}}],["src/posts/dto/filter",{"_index":345,"title":{},"body":{"classes/FilterPostsDto.html":{},"coverage.html":{}}}],["src/posts/dto/search",{"_index":612,"title":{},"body":{"classes/SearchPostsDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":615,"title":{},"body":{"classes/UpdatePostDTO.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:111",{"_index":447,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:130",{"_index":450,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:145",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:171",{"_index":460,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:199",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:68",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:89",{"_index":454,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module",{"_index":138,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/posts/posts.module.ts",{"_index":502,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service",{"_index":159,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/posts/posts.service.ts",{"_index":507,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:105",{"_index":530,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:126",{"_index":524,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:16",{"_index":515,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:22",{"_index":518,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:39",{"_index":522,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:48",{"_index":526,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:57",{"_index":532,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:75",{"_index":520,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:91",{"_index":528,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/schema/post.schema",{"_index":161,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/posts/schema/post.schema.ts",{"_index":391,"title":{},"body":{"classes/Post.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/posts/schema/post.schema.ts:10",{"_index":399,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:13",{"_index":395,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:16",{"_index":398,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:19",{"_index":397,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/schema/post.schema.ts:22",{"_index":401,"title":{},"body":{"classes/Post.html":{}}}],["src/test/src/admin/__mocks__/admin.mock.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/src/auth/__mocks__/auth.mock.ts",{"_index":723,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/src/posts/__mocks__/posts.mock.ts",{"_index":726,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/src/users/__mocks__/user.mock.ts",{"_index":732,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/user.dto",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/dto/user.dto.ts",{"_index":323,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["src/users/dto/user.dto.ts:11",{"_index":331,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/dto/user.dto.ts:16",{"_index":326,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/dto/user.dto.ts:22",{"_index":329,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/schemas/user.schema",{"_index":162,"title":{},"body":{"injectables/AdminService.html":{},"classes/Post.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":617,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts:10",{"_index":623,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:13",{"_index":619,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:16",{"_index":620,"title":{},"body":{"classes/User.html":{}}}],["src/users/schemas/user.schema.ts:19",{"_index":622,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:40",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":139,"title":{},"body":{"modules/AdminModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":656,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":163,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/users.service.ts",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:13",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":793,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":796,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":798,"title":{},"body":{"index.html":{}}}],["started",{"_index":776,"title":{"index.html":{}},"body":{}}],["statements",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":88,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["strategies/jwt.strategy",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":538,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["summary",{"_index":87,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":803,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":804,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["tech",{"_index":309,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/FilterPostsDto.html":{}}}],["test",{"_index":801,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test2",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test2@test2.com",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test3",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test3@test3.com",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test@test.com",{"_index":385,"title":{},"body":{"classes/Login.html":{},"classes/Register.html":{},"miscellaneous/variables.html":{}}}],["test@test.com.ar",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testpassword",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tests",{"_index":800,"title":{},"body":{"index.html":{}}}],["text",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.adminservice.deleteuseradmin(id",{"_index":110,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getallposts(page",{"_index":104,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getallusers",{"_index":95,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.authservice.login(req.user",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(register",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":381,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.jwt.verify(token",{"_index":703,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["this.jwtservice.sign(payload",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postmodel",{"_index":568,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.create",{"_index":537,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.find",{"_index":583,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.find().skip(skip).limit(limitint).lean",{"_index":545,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyid(id",{"_index":557,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyid(id).lean",{"_index":582,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyid(id).lean().exec",{"_index":548,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyidanddelete(id",{"_index":566,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyidandupdate(id",{"_index":560,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost",{"_index":488,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":497,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallposts(page",{"_index":169,"title":{},"body":{"injectables/AdminService.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.getfilterposts(query",{"_index":476,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(id",{"_index":483,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyuserid(userid",{"_index":486,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchposts",{"_index":480,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost",{"_index":494,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride(role_key",{"_index":606,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.usermodel",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.create(createuserdto",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().select",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id).select",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidanddelete(id",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser(createuser",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(email",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(register.email",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findbyid(userid",{"_index":535,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.deleteuserbyid(id",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.usersservice.findall",{"_index":165,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.usersservices.findbyid(id",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservices.updateuser(id",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":99,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["timestamps",{"_index":408,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["title",{"_index":303,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SearchPostsDto.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ValidateToken.html":{}}}],["transform",{"_index":327,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["transformer",{"_index":335,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["true",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":91,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{}}}],["type",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"guards/RolesGuard.html":{},"classes/SearchPostsDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":816,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":334,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdatePostDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types.objectid('655e078a81276db475f5e324",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/mongoose",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":378,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{}}}],["undefined",{"_index":396,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":618,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":799,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":815,"title":{},"body":{"properties.html":{}}}],["update",{"_index":458,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updated",{"_index":459,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["updatedpost",{"_index":559,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatedpost._id",{"_index":564,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(id",{"_index":455,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(iduser",{"_index":531,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":456,"title":{"classes/UpdatePostDTO.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDTO.html":{},"coverage.html":{}}}],["updateuser",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":341,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["url",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":61,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":80,"title":{},"body":{"controllers/AdminController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":23,"title":{"classes/User.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Post.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiresponse({status",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["user._id",{"_index":382,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["user.email",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.id",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":659,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.role",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["user.role?.includes(role",{"_index":611,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.username",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["userdelete",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdocument",{"_index":624,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["userfounded",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfounded.password",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":392,"title":{},"body":{"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["usermock",{"_index":734,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermockdata",{"_index":735,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermockrequest",{"_index":736,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermockupdated",{"_index":737,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usermodel",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"interfaces/PostRequest.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Register.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"classes/UserRequest.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":380,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpayload",{"_index":253,"title":{"interfaces/UserPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["userrequest",{"_index":196,"title":{"classes/UserRequest.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserRequest.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrole",{"_index":491,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":54,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiresponse({status",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{}}}],["users.controller",{"_index":657,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":626,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":631,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["userservices",{"_index":514,"title":{},"body":{"injectables/PostsService.html":{}}}],["usersid",{"_index":493,"title":{},"body":{"controllers/PostsController.html":{}}}],["usersmodule",{"_index":132,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":149,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservices",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["userupdate",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdated",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["usuario",{"_index":554,"title":{},"body":{"injectables/PostsService.html":{}}}],["uuid",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":376,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatetoken",{"_index":697,"title":{"injectables/ValidateToken.html":{}},"body":{"injectables/ValidateToken.html":{},"coverage.html":{}}}],["validatetoken(token",{"_index":701,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["validateuser",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":320,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FilterPostsDto.html":{},"classes/Login.html":{},"classes/Register.html":{},"classes/SearchPostsDto.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"classes/CreateUserDTO.html":{},"controllers/PostsController.html":{},"classes/UpdateUserDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":339,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["variable",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":820,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":812,"title":{},"body":{"properties.html":{}}}],["view",{"_index":444,"title":{},"body":{"controllers/PostsController.html":{}}}],["watch",{"_index":794,"title":{},"body":{"index.html":{}}}],["wich",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/UsersController.html":{}}}],["zoom",{"_index":133,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteUserWithAdmin\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAdminAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAdminAllUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteUserWithAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUserWithAdmin(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(ROLES.ADMIN)@Delete('users/:id')@ApiOperation({summary: 'Delete user wich match with the ID provided'})@ApiResponse({status: 200, description: 'Delete user'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAdminAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminAllPosts(page: string, limit: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(ROLES.ADMIN)@Get('posts')@ApiOperation({summary: 'List all posts'})@ApiResponse({status: 200, description: 'Return a posts list'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '1'\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '10'\n                                            \n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAdminAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminAllUsers(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(ROLES.ADMIN)@ApiOperation({summary: 'List users'})@ApiResponse({status: 200, description: 'Users list'})@Get('users')\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  Query,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { ROLES } from 'src/common/enums/role.enum';\nimport { AdminService } from './admin.service';\nimport { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiBearerAuth()\n@ApiTags('admin')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Controller('admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'List users' })\n  @ApiResponse({ status: 200, description: 'Users list' })\n  @Get('users')\n  async getAdminAllUsers(@Res() res: Response) {\n    try {\n      const dataUsers = await this.adminService.getAllUsers();\n      return res.status(HttpStatus.OK).json(dataUsers);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(ROLES.ADMIN)\n  @Get('posts')\n  @ApiOperation({\n    summary: 'List all posts',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Return a posts list',\n  })\n  async getAdminAllPosts(\n    @Query('page') page: string = '1',\n    @Query('limit') limit: string = '10',\n    @Res() res: Response,\n  ) {\n    try {\n      const dataPosts = await this.adminService.getAllPosts(page, limit);\n      return res.status(HttpStatus.OK).json(dataPosts);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(ROLES.ADMIN)\n  @Delete('users/:id')\n  @ApiOperation({ summary: 'Delete user wich match with the ID provided' })\n  @ApiResponse({ status: 200, description: 'Delete user' })\n  async deleteUserWithAdmin(@Param('id') id: string, @Res() res: Response) {\n    try {\n      const deletedUser = await this.adminService.deleteUserAdmin(id);\n      return res.status(HttpStatus.OK).json({\n        message: 'user deleted',\n        user: deletedUser.username,\n        email: deletedUser.email,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nPostsModule->AdminModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsModule } from 'src/posts/posts.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { AdminController } from './admin.controller';\nimport { AdminService } from './admin.service';\n\n@Module({\n  imports: [UsersModule, PostsModule],\n  controllers: [AdminController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserAdmin\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/admin/admin.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUserAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUserAdmin(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(page: string, limit: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/admin.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PostsService } from 'src/posts/posts.service';\nimport { Post } from 'src/posts/schema/post.schema';\nimport { User } from 'src/users/schemas/user.schema';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AdminService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly postsService: PostsService,\n  ) {}\n\n  async getAllUsers(): Promise {\n    const users = await this.usersService.findAll();\n    if (!users) throw new NotFoundException('dont search');\n    return users;\n  }\n\n  async getAllPosts(page: string, limit: string): Promise {\n    const posts = await this.postsService.getAllPosts(page, limit);\n    if (!posts) throw new NotFoundException('dont search');\n    return posts;\n  }\n\n  async deleteUserAdmin(id: string) {\n    const user = this.usersService.deleteUserById(id);\n    if (!user) throw new NotFoundException('dont delete');\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { AdminModule } from './admin/admin.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      isGlobal: true,\n    }),\n    MongooseModule.forRoot(process.env.DATABASES_URL),\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    AdminModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: UserRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UseGuards(LocalAuthGuard)@ApiOperation({summary: 'Assign token to a user'})@ApiResponse({status: 200, description: 'Return a token jwt'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            UserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(register: Register, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Create user'})@ApiResponse({status: 200, description: 'Return a message Created'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                register\n                                            \n                                                            Register\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpStatus,\n  NotFoundException,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { UserRequest } from 'src/common/interfaces/userRequest.interfaces';\nimport { AuthService } from './auth.service';\nimport { Register } from './dto/auth.dto';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  @UseGuards(LocalAuthGuard)\n  @ApiOperation({ summary: 'Assign token to a user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return a token jwt',\n  })\n  async login(@Req() req: UserRequest, @Res() res: Response) {\n    const token = await this.authService.login(req.user);\n    return res.status(HttpStatus.OK).json(token);\n  }\n\n  @Post('register')\n  @ApiOperation({ summary: 'Create user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return a message Created',\n  })\n  async register(@Body() register: Register, @Res() res: Response) {\n    const newUser = await this.authService.register(register);\n    if (!newUser) throw new NotFoundException();\n    return res.status(HttpStatus.OK).json({\n      message: 'created',\n      newUser,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: 'PALABRASECRETA',\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: UserPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(register: Register)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                register\n                                            \n                                                            Register\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { UserPayload } from 'src/common/interfaces/passport.interface';\nimport { CreateUserDTO } from 'src/users/dto/user.dto';\nimport { UsersService } from 'src/users/users.service';\nimport { Register } from './dto/auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateUser(email: string, password: string): Promise {\n    const userFounded = await this.userService.findByEmail(email);\n    if (!userFounded) throw new NotFoundException();\n    const isMatch = await bcrypt.compare(password, userFounded.password);\n    if (!isMatch) throw new NotFoundException('Email or password incorrects');\n    return userFounded;\n  }\n\n  async login(user: UserPayload) {\n    const payload = {\n      id: user.id,\n      username: user.username,\n      role: user.role,\n    };\n\n    return this.jwtService.sign(payload, {\n      secret: process.env.JWT_SECRET_KEY,\n    }); //* el metodo sign firma con el jwt\n  }\n\n  async register(register: Register): Promise {\n    const user = await this.userService.findByEmail(register.email);\n    if (user) throw new BadRequestException('the user exist');\n\n    const hashedPassword = await bcrypt.hash(register.password, 10);\n    const createUser = {\n      username: register.username,\n      email: register.email,\n      password: hashedPassword,\n    };\n    await this.userService.createUser(createUser);\n    return {\n      username: createUser.username,\n      email: createUser.email,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDTO.html":{"url":"classes/CreatePostDTO.html","title":"class - CreatePostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsNotEmpty()@ApiProperty({example: 'Nicolas', description: 'authors'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({example: 'tech, comedy', description: 'category'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({example: 'This a tech content', description: 'content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(4)@ApiProperty({example: 'title', description: 'title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString, MinLength } from 'class-validator';\n\nexport class CreatePostDTO {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @ApiProperty({ example: 'title', description: 'title' })\n  title: string;\n\n  @IsOptional()\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Nicolas', description: 'authors' })\n  author?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'This a tech content', description: 'content' })\n  content: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'tech, comedy', description: 'category' })\n  category: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({example: 'nicolas@nicolas.com', description: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@IsNotEmpty()@MinLength(8)@ApiProperty({example: 'password', description: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@ApiProperty({example: 'nicolas', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty({example: 'nicolas', description: 'username'})\n  readonly username: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({example: 'nicolas@nicolas.com', description: 'email'})\n  readonly email: string;\n\n  @Transform(({ value }) => value.trim())\n  @IsNotEmpty()\n  @MinLength(8)\n  @ApiProperty({example: 'password', description: 'password'})\n  readonly password: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterPostsDto.html":{"url":"classes/FilterPostsDto.html","title":"class - FilterPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/filter-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: 'Nicolas', description: 'authors'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/filter-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: 'tech, comedy', description: 'category'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/filter-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class FilterPostsDto {\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ example: 'Nicolas', description: 'authors' })\n  author?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ example: 'tech, comedy', description: 'category' })\n  category?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: UserPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: any; username: any; role: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserPayload } from 'src/common/interfaces/passport.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET_KEY,\n    });\n  }\n\n  validate(payload: UserPayload) {\n    return { id: payload.id, username: payload.username, role: payload.role };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) throw new UnauthorizedException();\n    return {\n      id: user._id,\n      username: user.username,\n      role: user.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty({example: 'test@test.com', description: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({example: 'Example1234.', description: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { ROLES } from 'src/common/enums/role.enum';\n\nexport class Login {\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'test@test.com', description: 'email' })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n}\n\nexport class Register extends Login {\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Nicolas', description: 'username' })\n  username?: string;\n\n  @IsEmail()\n  @ApiProperty({ example: 'nico@nico.com', description: 'email' })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/schema/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/schema/post.schema.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { User } from 'src/users/schemas/user.schema';\n\nexport type PostDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Post {\n  @Prop({ type: String, required: true })\n  title: string;\n\n  @Prop({ type: String, required: true })\n  author: string;\n\n  @Prop({ type: String })\n  content: string;\n\n  @Prop({ type: [String], required: true })\n  category: string[];\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true })\n  userId: User;\n}\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostRequest.html":{"url":"interfaces/PostRequest.html","title":"interface - PostRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/postRequest.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nexport interface PostRequest extends Request {\n  user: {\n    id: string;\n    username: string;\n    role: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteUserPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                filterPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getPostById\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getPostByUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                searchPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(req: PostRequest, body: CreatePostDTO, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'Return new post'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            PostRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreatePostDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteUserPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUserPost(req: PostRequest, id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(ROLES.ADMIN)@Delete(':id')@ApiOperation({summary: 'Delete a post'})@ApiResponse({status: 200, description: 'Delete post with id'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            PostRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        filterPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterPost(query: FilterPostsDto, res: Response, req: PostRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/filter')@ApiOperation({summary: 'Filter posts by category and author'})@ApiResponse({status: 200, description: 'Filter posts by author and category'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            FilterPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            PostRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(page: string, limit: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'List all posts'})@ApiResponse({status: 200, description: 'Return a posts list'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '1'\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '10'\n                                            \n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string, res: Response, req: PostRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'View details of a specific post'})@ApiResponse({status: 200, description: 'Returns a post by id'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            PostRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getPostByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostByUser(userId: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:userId')@ApiOperation({summary: 'you get the posts from a specific user'})@ApiResponse({status: 200, description: 'Returns a post by userId'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        searchPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    searchPost(undefined: SearchPostsDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({summary: 'Search for posts by title, content, author'})@ApiResponse({status: 200, description: 'Returns the posts that match the search parameters'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            SearchPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: string, req: PostRequest, body: UpdatePostDTO, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(ROLES.ADMIN)@Put(':id')@ApiOperation({summary: 'Update a post'})@ApiResponse({status: 200, description: 'Updated post with id'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            PostRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdatePostDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { ROLES } from 'src/common/enums/role.enum';\nimport { PostRequest } from 'src/common/interfaces/postRequest.interface';\nimport { CreatePostDTO } from './dto/create-post.dto';\nimport { FilterPostsDto } from './dto/filter-post.dto';\nimport { SearchPostsDto } from './dto/search-post.dto';\nimport { UpdatePostDTO } from './dto/update-post.dto';\nimport { PostsService } from './posts.service';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@ApiBearerAuth()\n@ApiTags('posts')\n@Roles(ROLES.USER)\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get()\n  @ApiOperation({\n    summary: 'List all posts',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Return a posts list',\n  })\n  async getAllPosts(\n    @Query('page') page: string = '1',\n    @Query('limit') limit: string = '10',\n    @Res() res: Response,\n  ) {\n    try {\n      const data = await this.postsService.getAllPosts(page, limit);\n      return res.status(HttpStatus.OK).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get('/filter')\n  @ApiOperation({ summary: 'Filter posts by category and author' })\n  @ApiResponse({\n    status: 200,\n    description: 'Filter posts by author and category',\n  })\n  async filterPost(\n    @Query() query: FilterPostsDto,\n    @Res() res: Response,\n    @Req() req: PostRequest,\n  ) {\n    try {\n      const result = await this.postsService.getFilterPosts(query, req.user.id);\n      return res.status(HttpStatus.OK).json(result);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get('/search')\n  @ApiOperation({\n    summary: 'Search for posts by title, content, author',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns the posts that match the search parameters',\n  })\n  async searchPost(\n    @Query() { title, page = '1', limit = '10' }: SearchPostsDto,\n    @Res() res: Response,\n  ) {\n    try {\n      const result = await this.postsService.searchPosts({\n        title,\n        page,\n        limit,\n      });\n      return res.status(HttpStatus.OK).json({ result });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'View details of a specific post' })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns a post by id',\n  })\n  async getPostById(\n    @Param('id') id: string,\n    @Res() res: Response,\n    @Req() req: PostRequest,\n  ) {\n    try {\n      const data = await this.postsService.getPostById(id, req.user.id);\n      return res.status(HttpStatus.OK).json({ data });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get('/user/:userId')\n  @ApiOperation({ summary: 'you get the posts from a specific user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns a post by userId',\n  })\n  async getPostByUser(@Param('userId') userId: string, @Res() res: Response) {\n    try {\n      const data = await this.postsService.getPostByUserId(userId);\n      return res.status(HttpStatus.OK).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new post' })\n  @ApiResponse({\n    status: 201,\n    description: 'Return new post',\n  })\n  async createPost(\n    @Req() req: PostRequest,\n    @Body() body: CreatePostDTO,\n    @Res() res: Response,\n  ) {\n    try {\n      const userId = req.user.id;\n      const userName = req.user.username;\n      const data = await this.postsService.createPost({\n        body,\n        userId,\n        userName,\n      });\n      return res.status(HttpStatus.CREATED).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(ROLES.ADMIN)\n  @Put(':id')\n  @ApiOperation({ summary: 'Update a post' })\n  @ApiResponse({\n    status: 200,\n    description: 'Updated post with id',\n  })\n  async updatePost(\n    @Param('id') id: string,\n    @Req() req: PostRequest,\n    @Body() body: UpdatePostDTO,\n    @Res() res: Response,\n  ) {\n    try {\n      const userRole = req.user.role;\n      const usersId = req.user.id;\n      const data = await this.postsService.updatePost(\n        usersId,\n        id,\n        body,\n        userRole,\n      );\n      res.status(HttpStatus.CREATED).json({ data });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(ROLES.ADMIN)\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a post' })\n  @ApiResponse({\n    status: 200,\n    description: 'Delete post with id',\n  })\n  async deleteUserPost(\n    @Req() req: PostRequest,\n    @Param('id') id: string,\n    @Res() res: Response,\n  ) {\n    try {\n      const userRole = req.user.role;\n      const userId = req.user.id;\n      const data = await this.postsService.deletePost(userId, id, userRole);\n      return res.status(HttpStatus.OK).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PostsController } from './posts.controller';\nimport { Post, PostSchema } from './schema/post.schema';\nimport { PostsService } from './posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Post.name, schema: PostSchema }]),\n    UsersModule,\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getFilterPosts\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostByUserId\n                            \n                            \n                                    Async\n                                searchPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model, userServices: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userServices\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(idUser: string, id: string, userRole: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(page: string, limit: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFilterPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFilterPosts(filterDto: FilterPostsDto, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filterDto\n                                            \n                                                            FilterPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        searchPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    searchPosts(searchPostsDto: SearchPostsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchPostsDto\n                                            \n                                                            SearchPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(idUser: string, id: string, body: UpdatePostDTO, userRole: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdatePostDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UpdatePostDTO } from './dto/update-post.dto';\nimport { Post } from './schema/post.schema';\nimport { FilterPostsDto } from './dto/filter-post.dto';\nimport { SearchPostsDto } from './dto/search-post.dto';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectModel(Post.name) private readonly postModel: Model,\n    private readonly userServices: UsersService,\n  ) {}\n\n  async createPost({ body, userId, userName }) {\n    const { title, content, category } = body;\n\n    const user = await this.userServices.findById(userId);\n    if (!(userName === user.username)) throw new UnauthorizedException();\n\n    const postCreated = await this.postModel.create({\n      title,\n      author: userName,\n      content,\n      category,\n      userId,\n    });\n    if (!postCreated) throw new BadRequestException();\n    return { message: 'Post created successfully', id: postCreated._id };\n  }\n\n  async getAllPosts(page: string, limit: string): Promise {\n    const pageInt = parseInt(page);\n    const limitInt = parseInt(limit);\n    const skip = (pageInt - 1) * limitInt;\n    const posts = await this.postModel.find().skip(skip).limit(limitInt).lean();\n    if (!posts) throw new NotFoundException('No posts here');\n    return posts;\n  }\n\n  async getPostById(id: string, userId: string) {\n    const post = await this.postModel.findById(id).lean().exec();\n    //BUSCA QUE SE COINCIDA EL ID DEL USUARIO\n    if (!(post.userId.toString() === userId)) throw new UnauthorizedException();\n\n    if (!post) throw new BadRequestException();\n    return post;\n  }\n\n  async updatePost(\n    idUser: string,\n    id: string,\n    body: UpdatePostDTO,\n    userRole: string,\n  ): Promise {\n    //BUSCA QUE SE COINCIDA EL ID DEL USUARIO\n    const postUser: Post = await this.postModel.findById(id);\n    if (!(idUser === postUser.userId.toString()) || !(userRole === 'admin')) {\n      throw new UnauthorizedException();\n    }\n\n    const updatedPost = await this.postModel.findByIdAndUpdate(id, body).lean();\n    if (!updatedPost) throw new NotFoundException('Post not founded');\n\n    return { message: 'Post updated successfully', id: updatedPost._id };\n  }\n\n  async deletePost(\n    idUser: string,\n    id: string,\n    userRole: string,\n  ): Promise {\n    const postUser: Post = await this.postModel.findById(id);\n    if (!(idUser === postUser.userId.toString()) || !(userRole === 'admin')) {\n      throw new UnauthorizedException();\n    }\n\n    const postDeleted = await this.postModel.findByIdAndDelete(id);\n    if (!postDeleted) throw new NotFoundException('Post not founded');\n\n    return { message: 'Post deleted successfully', id: postDeleted._id };\n  }\n\n  async getPostByUserId(userId: string) {\n    const posts = await this.postModel\n      .find({ userId })\n      .populate({\n        path: 'userId',\n        select: '_id',\n      })\n      .exec();\n    if (!posts) {\n      throw new NotFoundException();\n    }\n    return posts;\n  }\n\n  async searchPosts(searchPostsDto: SearchPostsDto) {\n    const { title, page, limit } = searchPostsDto;\n\n    if (!title || title === '') throw new NotFoundException('insert title');\n\n    const results = await this.postModel\n      .find({\n        $or: [\n          { title: { $regex: title, $options: 'i' } },\n          { content: { $regex: title, $options: 'i' } },\n        ],\n      })\n      .skip((parseInt(page) - 1) * parseInt(limit))\n      .limit(parseInt(limit))\n      .lean();\n    if (!results) {\n      throw new NotFoundException('Posts not founded');\n    }\n    return results;\n  }\n\n  async getFilterPosts(filterDto: FilterPostsDto, id: string) {\n    const { author, category } = filterDto;\n    const postUser: Post = await this.postModel.findById(id).lean();\n\n    if (!(postUser.userId.toString() === id)) throw new UnauthorizedException();\n\n    if (author && category) {\n      const result = await this.postModel.find({ author, category }).lean();\n      if (!result) throw new BadRequestException();\n\n      return result;\n    } else if (category) {\n      const result = await this.postModel.find({ category }).lean();\n      if (!result) throw new BadRequestException();\n\n      return result;\n    } else if (author) {\n      const result = await this.postModel.find({ author }).lean();\n      if (!result) throw new BadRequestException();\n\n      return result;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Register.html":{"url":"classes/Register.html","title":"class - Register","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Register\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Login\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'nico@nico.com', description: 'email'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Login\n\n                            \n                        \n                    \n                        \n                                Defined in         Login:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({example: 'Example1234.', description: 'password'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Login\n\n                            \n                        \n                    \n                        \n                                Defined in         Login:29\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({example: 'Nicolas', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { ROLES } from 'src/common/enums/role.enum';\n\nexport class Login {\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'test@test.com', description: 'email' })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n}\n\nexport class Register extends Login {\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Nicolas', description: 'username' })\n  username?: string;\n\n  @IsEmail()\n  @ApiProperty({ example: 'nico@nico.com', description: 'email' })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES } from 'src/common/enums/role.enum';\nimport { ROLE_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!roles) {\n      return false;\n    }\n    const request = context.switchToHttp().getRequest();\n    const { user } = request;\n    return roles.some((role) => user.role?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchPostsDto.html":{"url":"classes/SearchPostsDto.html","title":"class - SearchPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/search-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: '10', description: 'limit element'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/search-post.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: '1', description: 'page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/search-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: 'title', description: 'title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/search-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class SearchPostsDto {\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ example: 'title', description: 'title' })\n  title?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ example: '1', description: 'page' })\n  page?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ example: '10', description: 'limit element' })\n  limit?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDTO.html":{"url":"classes/UpdatePostDTO.html","title":"class - UpdatePostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreatePostDTO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePostDTO } from './create-post.dto';\n\nexport class UpdatePostDTO extends PartialType(CreatePostDTO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDTO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @ApiProperty({example: 'nicolas', description: 'username'})\n  readonly username: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({example: 'nicolas@nicolas.com', description: 'email'})\n  readonly email: string;\n\n  @Transform(({ value }) => value.trim())\n  @IsNotEmpty()\n  @MinLength(8)\n  @ApiProperty({example: 'password', description: 'password'})\n  readonly password: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ROLES\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: ROLES, required: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { ROLES } from 'src/common/enums/role.enum';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class User {\n  @Prop({ type: String, required: true, unique: true })\n  username: string;\n\n  @Prop({ type: String, required: true, unique: true })\n  email: string;\n\n  @Prop({ type: String, required: true })\n  password: string;\n\n  @Prop({ type: String, enum: ROLES, required: true, default: ROLES.USER })\n  role: ROLES;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPayload.html":{"url":"interfaces/UserPayload.html","title":"interface - UserPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/passport.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserPayload {\n  id: string;\n  username: string;\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRequest.html":{"url":"classes/UserRequest.html","title":"class - UserRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/userRequest.interfaces.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/interfaces/userRequest.interfaces.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserRequest extends Request {\n  user: {\n    id: string;\n    username: string;\n    role: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(ROLES.USER)@Get(':id')@ApiOperation({summary: 'Get details of a specific user'})@ApiResponse({status: 200, description: 'Return user wich match with the ID provided'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, body: CreateUserDTO, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(ROLES.USER, ROLES.ADMIN)@Put(':id')@ApiOperation({summary: 'Update a specific user'})@ApiResponse({status: 200, description: 'Update user'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Put,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { Roles } from 'src/auth/decorators/roles.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from 'src/auth/guards/roles.guard';\nimport { ROLES } from 'src/common/enums/role.enum';\nimport { CreateUserDTO, UpdateUserDTO } from './dto/user.dto';\nimport { UsersService } from './users.service';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@ApiBearerAuth()\n@ApiTags('users')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersServices: UsersService) {}\n\n  @Roles(ROLES.USER)\n  @Get(':id')\n  @ApiOperation({ summary: 'Get details of a specific user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return user wich match with the ID provided',\n  })\n  async getUserById(@Param('id') id: string, @Res() res: Response) {\n    const user = await this.usersServices.findById(id);\n    if (!user) throw new NotFoundException('bad request');\n    return res.status(HttpStatus.OK).json({\n      username: user.username,\n      email: user.email,\n      role: user.role,\n    });\n  }\n\n  @Roles(ROLES.USER, ROLES.ADMIN)\n  @Put(':id')\n  @ApiOperation({ summary: 'Update a specific user' })\n  @ApiResponse({ status: 200, description: 'Update user' })\n  async updateUser(\n    @Param('id') id: string,\n    @Body() body: CreateUserDTO,\n    @Res() res: Response,\n  ) {\n    const user = await this.usersServices.updateUser(id, body);\n    if (!user) throw new NotFoundException('bad update');\n    return res.status(HttpStatus.OK).json({\n      message: 'user updated successfully',\n      userUpdated: {\n        username: user.username,\n        email: user.email,\n        role: user.role,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                deleteUserById\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \ndeleteUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUser\n                        \n                    \n                \n            \n            \n                \nupdateUser(id: string, body: CreateUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateUserDTO } from './dto/user.dto';\nimport { User } from './schemas/user.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n  ) {}\n\n  findAll(): Promise {\n    const users = this.userModel.find().select('-password').lean();\n    if (!users) throw new NotFoundException('It was not possible to search');\n    return users;\n  }\n\n  async createUser(createUserDto: CreateUserDTO): Promise {\n    const newUser = await this.userModel.create(createUserDto);\n    return newUser.save();\n  }\n\n  async findById(id: string): Promise {\n    const user = await this.userModel.findById(id).select('-password').exec();\n    if (!user) throw new NotFoundException('I dont know in');\n    return user;\n  }\n\n  deleteUserById(id: string): Promise {\n    const userDelete = this.userModel.findByIdAndDelete(id);\n    if (!userDelete) throw new NotFoundException('could not be deleted');\n    return userDelete;\n  }\n\n  updateUser(id: string, body: CreateUserDTO): Promise {\n    const userUpdate = this.userModel\n      .findByIdAndUpdate(id, body, {\n        new: true,\n      })\n      .lean();\n    if (!userUpdate) throw new NotFoundException('could not be updated');\n    return userUpdate;\n  }\n\n  async findByEmail(email: string) {\n    const user = await this.userModel.findOne({ email });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateToken.html":{"url":"injectables/ValidateToken.html","title":"injectable - ValidateToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidateToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.validate.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.validate.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validateToken\n                        \n                    \n                \n            \n            \n                \nvalidateToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.validate.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ValidateToken {\n  constructor(private jwt: JwtService) {}\n\n  validateToken(token: string) {\n    return this.jwt.verify(token, {\n      secret: process.env.JWT_SECRET_KEY,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            Register\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.validate.ts\n            \n            injectable\n            ValidateToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/passport.interface.ts\n            \n            interface\n            UserPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/postRequest.interface.ts\n            \n            interface\n            PostRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/userRequest.interfaces.ts\n            \n            class\n            UserRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/dto/filter-post.dto.ts\n            \n            class\n            FilterPostsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/search-post.dto.ts\n            \n            class\n            SearchPostsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/posts/schema/post.schema.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/schema/post.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/admin/__mocks__/admin.mock.ts\n            \n            variable\n            mockDataAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/auth/__mocks__/auth.mock.ts\n            \n            variable\n            AuthMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/auth/__mocks__/auth.mock.ts\n            \n            variable\n            mockToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/auth/__mocks__/auth.mock.ts\n            \n            variable\n            req\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/posts/__mocks__/posts.mock.ts\n            \n            variable\n            messageSuccessfully\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/posts/__mocks__/posts.mock.ts\n            \n            variable\n            mockData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/posts/__mocks__/posts.mock.ts\n            \n            variable\n            mockPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/posts/__mocks__/posts.mock.ts\n            \n            variable\n            mockQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/posts/__mocks__/posts.mock.ts\n            \n            variable\n            mockRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/users/__mocks__/user.mock.ts\n            \n            function\n            newMockResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/users/__mocks__/user.mock.ts\n            \n            variable\n            mockRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/users/__mocks__/user.mock.ts\n            \n            variable\n            UserMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/users/__mocks__/user.mock.ts\n            \n            variable\n            UserMockData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/users/__mocks__/user.mock.ts\n            \n            variable\n            UserMockRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test/src/users/__mocks__/user.mock.ts\n            \n            variable\n            UserMockUpdated\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/user.dto.ts\n            \n            class\n            UpdateUserDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : 10.2.8\n        \n            @nestjs/config : 3.1.1\n        \n            @nestjs/core : 10.0.0\n        \n            @nestjs/jwt : 10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : 10.0.2\n        \n            @nestjs/passport : 10.0.2\n        \n            @nestjs/platform-express : 10.0.0\n        \n            @nestjs/swagger : ^7.2.0\n        \n            @types/mongoose : 5.11.97\n        \n            bcrypt : 5.1.1\n        \n            class-transformer : 0.5.1\n        \n            class-validator : 0.14.0\n        \n            mongoose : 7.6.5\n        \n            passport : 0.6.0\n        \n            passport-jwt : 4.0.1\n        \n            passport-local : 1.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rxjs : 7.8.1\n        \n            swagger-ui-express : ^5.0.0\n        \n            uuid : 9.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLES   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLES\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            newMockResponse   (src/.../user.mock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/test/src/users/__mocks__/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        newMockResponse\n                        \n                    \n                \n            \n            \n                \nnewMockResponse()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Response\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n\nDescription\nProject \nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nPostsModule->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostDocument   (src/.../post.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/schema/post.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PostDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthMock   (src/.../auth.mock.ts)\n                        \n                        \n                            messageSuccessfully   (src/.../posts.mock.ts)\n                        \n                        \n                            mockData   (src/.../posts.mock.ts)\n                        \n                        \n                            mockDataAdmin   (src/.../admin.mock.ts)\n                        \n                        \n                            mockPost   (src/.../posts.mock.ts)\n                        \n                        \n                            mockQuery   (src/.../posts.mock.ts)\n                        \n                        \n                            mockRequest   (src/.../posts.mock.ts)\n                        \n                        \n                            mockRequest   (src/.../user.mock.ts)\n                        \n                        \n                            mockToken   (src/.../auth.mock.ts)\n                        \n                        \n                            PostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            req   (src/.../auth.mock.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            UserMock   (src/.../user.mock.ts)\n                        \n                        \n                            UserMockData   (src/.../user.mock.ts)\n                        \n                        \n                            UserMockRequest   (src/.../user.mock.ts)\n                        \n                        \n                            UserMockUpdated   (src/.../user.mock.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test/src/auth/__mocks__/auth.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthMock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  username: 'test',\n  email: 'test@test.com.ar',\n  password: '1234test',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        req\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRequest\n\n                    \n                \n                \n                    \n                        Default value : {\n  user: {\n    id: 'string',\n    username: 'test',\n    role: 'user'\n  },\n  cache: 'default',\n  credentials: 'include',\n  destination: '',\n  headers: undefined,\n  integrity: '',\n  keepalive: false,\n  method: '',\n  mode: 'same-origin',\n  redirect: 'error',\n  referrer: '',\n  referrerPolicy: '',\n  signal: undefined,\n  url: '',\n  clone: function (): globalThis.Request {\n    throw new Error('Function not implemented.');\n  },\n  body: undefined,\n  bodyUsed: false,\n  arrayBuffer: function (): Promise {\n    throw new Error('Function not implemented.');\n  },\n  blob: function (): Promise {\n    throw new Error('Function not implemented.');\n  },\n  formData: function (): Promise {\n    throw new Error('Function not implemented.');\n  },\n  json: function (): Promise {\n    throw new Error('Function not implemented.');\n  },\n  text: function (): Promise {\n    throw new Error('Function not implemented.');\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/test/src/posts/__mocks__/posts.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        messageSuccessfully\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  message: 'Post updated successfully',\n  id: new Types.ObjectId(),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    _id: new Types.ObjectId('655e078a81276db475f5e324'),\n    title: 'test',\n    author: 'test',\n    content: 'test',\n    category: ['test'],\n    userId: {\n      _id: '655e078a81276db475f5e324',\n      username: 'test',\n      email: 'test@test.com',\n      password: 'testpassword',\n      role: ROLES.ADMIN,\n    },\n    __v: 0,\n  },\n  {\n    _id: new Types.ObjectId('655e078a81276db475f5e324'),\n    title: 'test',\n    author: 'test2',\n    content: 'test2',\n    category: ['test2'],\n    userId: {\n      _id: '655e078a81276db475f5e324',\n      username: 'test2',\n      email: 'test2@test2.com',\n      password: 'testpassword',\n      role: ROLES.USER,\n    },\n    __v: 0,\n  },\n  {\n    _id: new Types.ObjectId('655e078a81276db475f5e324'),\n    title: 'test',\n    author: 'test3',\n    content: 'test3',\n    category: ['test3'],\n    userId: {\n      _id: '655e078a81276db475f5e324',\n      username: 'test3',\n      email: 'test3@test3.com',\n      password: 'testpassword',\n      role: ROLES.USER,\n    },\n    __v: 0,\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  _id: new Types.ObjectId(),\n  title: 'test',\n  author: 'test',\n  content: 'test',\n  category: ['test'],\n  userId: {\n    _id: '655e078a81276db475f5e558',\n    username: 'TEST',\n    email: 'TEST@TEST.COM',\n    password: 'TESTPASSWORD',\n    role: ROLES.USER,\n  },\n  __v: 0,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockQuery\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SearchPostsDto\n\n                    \n                \n                \n                    \n                        Default value : {\n  title: 'test',\n  page: '1',\n  limit: '10',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  user: { id: '123id' },\n} as unknown as PostRequest\n                    \n                \n\n\n        \n    \n\n    src/test/src/admin/__mocks__/admin.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockDataAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    _id: new mongoose.Types.ObjectId(),\n    author: 'test',\n    category: ['test'],\n    content: 'test',\n    title: 'test',\n    userId: {\n      _id: new mongoose.Types.ObjectId(),\n      email: 'test@test.com',\n      password: 'passwordtest',\n      role: ROLES.USER,\n      username: 'test',\n    },\n  },\n  {\n    _id: new mongoose.Types.ObjectId(),\n    author: 'test2',\n    category: ['test2'],\n    content: 'test2',\n    title: 'test2',\n    userId: {\n      _id: new mongoose.Types.ObjectId(),\n      email: 'test@test.com',\n      password: 'passwordtest',\n      role: ROLES.USER,\n      username: 'test',\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/test/src/users/__mocks__/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockRequest\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  user: { id: '123id' },\n} as unknown as UserRequest\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserMock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  _id: new mongoose.Types.ObjectId(),\n  username: 'test',\n  email: 'test@test.com',\n  password: 'passwordtest',\n  role: ROLES.USER,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserMockData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    username: 'test',\n    email: 'test@test.com',\n    password: 'passwordtest',\n    role: ROLES.USER,\n  },\n  {\n    username: 'admin',\n    email: 'admin@admin.com',\n    password: 'passwordadmin',\n    role: ROLES.ADMIN,\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserMockRequest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: '126421674hdjsab',\n  username: 'test',\n  email: 'test@test.com',\n  password: 'passwordtest',\n  role: ROLES.USER,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserMockUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  username: 'test',\n  email: 'test@test.com',\n  password: 'passwordtest'\n}\n                    \n                \n\n\n        \n    \n\n    src/posts/schema/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...role: ROLES[]) => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
